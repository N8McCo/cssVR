html, body {
  height: 100%;
  overflow: hidden;
}

#container:not(:-moz-full-screen) {
  /* this is just to move the scene to the visible area when not in fullscreen VR */
  transform: translate(800px, 300px) rotateX(180deg);
  perspective: 1000px;
}

/* All threed-class elements have preserve-3d; preserve-3d is NOT inherited.  (There's an open
 * discussion on w3-style about adding a new transform-style that is like preserve-3d but is
 * inherited.)
 *
 * position: absolute; and 0,0 is also set because we'll position these elements fully using
 * 3D transforms.  Their CSS position is irrelevant for us.  Without this, their CSS position
 * will come into play as well as their transform.
 *
 * When in fullscreen VR, the 0,0,0 position is at the center of the viewport and not the top
 * left.
 *
 * We don't modify the original transform-origin here (50% 50% 0), because that can be useful
 * for moving elements around by their center point.  But it could also be set to 0,0,0 to
 * make it completely clear exactly where/how 3D objects are moving.
 */
.threed {
  transform-style: preserve-3d;
  position: absolute;
  top: 0; left: 0;
}

/* The camera div just serves as a way to set up a modelview transform for the entire rest of the
 * scene.  The transform that's set on it needs to be the *inverse* of where you want the camera
 * to be; that is, if you want the camera to be at (0, 0, 500), then the transform needs to be
 * set to (0, 0, -500).  The transform-origin is set here because we want to go from the origin
 */
.camera {
  transform-origin: 0 0 0;
  /* the transform itself is set programatically, since it needs to take into account the HMD orientation */
}